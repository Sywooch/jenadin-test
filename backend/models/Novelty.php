<?php

namespace backend\models;

use common\components\Mailer;
use common\components\MultilingualBehavior;
use common\models\Bean;
use common\models\Lang;
use common\models\User;
use common\modules\i18n\Module;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "novelty".
 *
 * @property integer $id
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $title
 * @property string $content
 * @property boolean $send
 *
 * @property Noveltylang[] $noveltylangs
 */
class Novelty extends Bean
{

    const TABLE_QUEUE = 'novelty_queue';

    const STATUS_NOT_SEND = 0;

    const STATUS_SEND = 1;

    /**
     * @var string
     */
    protected $tableLang = 'noveltylang';

    /**
     * Initialize multilingual fields
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Behaviors of the model
     * @return array
     */
    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            TimestampBehavior::className(),
        ]);
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'novelty';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['created_at', 'updated_at', 'send'], 'integer'],
            [['title', 'content'], 'string'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'         => Module::t('Id'),
            'created_at' => Module::t('Createdat'),
            'updated_at' => Module::t('Updatedat'),
            'title'      => Module::t('Title'),
            'content'    => Module::t('Text'),
            'send'       => Module::t('Send')
        ];
    }

    /**
     * Method for getting the name of the bean
     * Is called for breadcrumb generation
     * @return array
     */
    public static function getLabels()
    {
        return [
            'singular' => 'Novelty',
            'multiple' => 'Novelties'
        ];
    }

    /**
     * @return string
     */
    public function getNoveltyTitle()
    {
        return $this->title;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNoveltylangs()
    {
        return $this->hasMany(Noveltylang::className(), ['novelty_id' => 'id']);
    }

    /**
     * Add the current novelty to the send queue
     */
    public function addToQueue()
    {
        $insertData = [
            'novelty_id' => $this->id,
            'status'     => self::STATUS_NOT_SEND
        ];
        \Yii::$app->db->createCommand()
            ->insert(self::TABLE_QUEUE, $insertData)
            ->execute();
        $this->send = self::STATUS_SEND;
        $this->save();
    }

    /**
     * Send queued novelties
     */
    public static function sendQueuedNovelties()
    {
        $users = User::find()->where([
            'status' => User::STATUS_ACTIVE,
            'subscription' => User::IS_SUBSCRIBED
        ])->all();
        $novelties = self::find()
            ->join('inner join', self::TABLE_QUEUE, self::TABLE_QUEUE . '.novelty_id = '.self::tableName() . '.id')
            ->where([
                self::TABLE_QUEUE . '.status' => self::STATUS_NOT_SEND
            ])
            ->distinct()
            ->all();
        foreach ($novelties as $novelty) {
            foreach ($users as $user) {
                $mail = Mailer::get($user->email, $novelty->title, $novelty->content);
                $mail->send();
            }
            $updateData = [
                'status' => self::STATUS_SEND
            ];
            \Yii::$app->db->createCommand()
                ->update(self::TABLE_QUEUE, $updateData, [
                    'novelty_id' => $novelty->id
                ])
                ->execute();
        }
    }

}
